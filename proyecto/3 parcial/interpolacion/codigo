"# Polinomio de interpolaci√≥n\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "def createMatrix(m,n,v):\n",
    "\n",
    "    C = []\n",
    "\n",
    "    for i in range(m):\n",
    "\n",
    "        C.append([v]*n)\n",
    "\n",
    "    return C\n",
    "\n",
    "\n",
    "\n",
    "def getDimensions(A):\n",
    "\n",
    "    return (len(A),len(A[0]))\n",
    "\n",
    "\n",
    "\n",
    "def copyMatrix(B):\n",
    "\n",
    "    m,n = getDimensions(B)\n",
    "\n",
    "    A = createMatrix(m,n,0)\n",
    "\n",
    "    for i in range(m):\n",
    "\n",
    "        for j in range(n):\n",
    "\n",
    "            A[i][j] = B[i][j]\n",
    "\n",
    "    return A\n",
    "\n",
    "\n",
    "\n",
    "def sumaMatrix(A,B):\n",
    "\n",
    "    Am,An = getDimensions(A)\n",
    "\n",
    "    Bm,Bn = getDimensions(B)\n",
    "\n",
    "    if Am != Bm or An != Bn:\n",
    "\n",
    "        print(\"Error las dimensiones deben ser iguales\")\n",
    "\n",
    "        return []\n",
    "\n",
    "    C = createMatrix(Am,An,0)\n",
    "\n",
    "    for i in range(Am):\n",
    "\n",
    "        for j in range(An):\n",
    "\n",
    "            C[i][j] = A[i][j] + B[i][j]\n",
    "\n",
    "    return C\n",
    "\n",
    "\n",
    "\n",
    "def restaMatrix(A,B):\n",
    "\n",
    "    Am,An = getDimensions(A)\n",
    "\n",
    "    Bm,Bn = getDimensions(B)\n",
    "\n",
    "    if Am != Bm or An != Bn:\n",
    "\n",
    "        print(\"Error las dimensiones deben ser iguales\")\n",
    "\n",
    "        return []\n",
    "\n",
    "    C = createMatrix(Am,An,0)\n",
    "\n",
    "    for i in range(Am):\n",
    "\n",
    "        for j in range(An):\n",
    "\n",
    "            C[i][j] = A[i][j] - B[i][j]\n",
    "\n",
    "    return C\n",
    "\n",
    "\n",
    "\n",
    "def multMatrix(A,B):\n",
    "\n",
    "    Am,An = getDimensions(A)\n",
    "\n",
    "    Bm,Bn = getDimensions(B)\n",
    "\n",
    "    if An != Bm:\n",
    "\n",
    "        print(\"Error las dimensiones deben ser conformable\")\n",
    "\n",
    "        return []\n",
    "\n",
    "    C = createMatrix(Am,Bn,0)\n",
    "\n",
    "    for i in range(Am):\n",
    "\n",
    "        for j in range(Bn):\n",
    "\n",
    "            for k in range(An):\n",
    "\n",
    "                    C[i][j] += A[i][k] * B[k][j]\n",
    "\n",
    "    return C\n",
    "\n",
    "    \n",
    "\n",
    "def getAdyacente(A,r,c):\n",
    "\n",
    "    Am,An = getDimensions(A)\n",
    "\n",
    "    C = createMatrix(Am-1,An-1,0)\n",
    "\n",
    "    for i in range(Am):\n",
    "\n",
    "        if i == r:\n",
    "\n",
    "            continue\n",
    "\n",
    "        for j in range(An):\n",
    "\n",
    "            if j == c:\n",
    "\n",
    "                continue\n",
    "\n",
    "            ci = 0\n",
    "\n",
    "            cj = 0\n",
    "\n",
    "            if(i < r):\n",
    "\n",
    "                ci = i\n",
    "\n",
    "            else:\n",
    "\n",
    "                ci = i - 1\n",
    "\n",
    "            if(j < c):\n",
    "\n",
    "                cj = j\n",
    "\n",
    "            else:\n",
    "\n",
    "                cj = j - 1\n",
    "\n",
    "            C[ci][cj] = A[i][j]\n",
    "\n",
    "    return C\n",
    "\n",
    "\n",
    "\n",
    "def detMatrix(A):\n",
    "\n",
    "    m,n = getDimensions(A)\n",
    "\n",
    "    if m != n:\n",
    "\n",
    "        print(\"La matriz no es cuadrada\")\n",
    "\n",
    "        return []\n",
    "\n",
    "    if m == 1:\n",
    "\n",
    "        return A[0][0]\n",
    "\n",
    "    if m == 2:\n",
    "\n",
    "        return A[0][0]*A[1][1] - A[1][0]*A[0][1]\n",
    "\n",
    "    det = 0\n",
    "\n",
    "    for j in range(m):\n",
    "\n",
    "        det += ((-1)**j)*A[0][j]*detMatrix(getAdyacente(A,0,j))\n",
    "\n",
    "    return det\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def getMatrizTranspuesta(A):\n",
    "\n",
    "    m,n = getDimensions(A)\n",
    "\n",
    "    C = createMatrix(n,m,0)\n",
    "\n",
    "    for i in range(m):\n",
    "\n",
    "        for j in range(n):\n",
    "\n",
    "            C[j][i] = A[i][j]\n",
    "\n",
    "    return C\n",
    "\n",
    "\n",
    "\n",
    "def getMatrizAdjunta(A):\n",
    "\n",
    "    m,n = getDimensions(A)\n",
    "\n",
    "    if m != n:\n",
    "\n",
    "        print(\"La matriz no es cuadrada\")\n",
    "\n",
    "        return []\n",
    "\n",
    "    C = createMatrix(m,n,0)\n",
    "\n",
    "    for i in range(m):\n",
    "\n",
    "        for j in range(n):\n",
    "\n",
    "            C[i][j] = ((-1)**(i+j))*detMatrix(getAdyacente(A,i,j))\n",
    "\n",
    "    return C\n",
    "\n",
    "\n",
    "\n",
    "def getMatrizInversa(A):\n",
    "\n",
    "    m,n = getDimensions(A)\n",
    "\n",
    "    if m != n:\n",
    "\n",
    "        print(\"La matriz no es cuadrada\")\n",
    "\n",
    "        return []\n",
    "\n",
    "    detA = detMatrix(A)\n",
    "\n",
    "    if detA == 0:\n",
    "\n",
    "        print(\"La matriz no tiene inversa\")\n",
    "\n",
    "        return []\n",
    "\n",
    "    At = getMatrizTranspuesta(A)\n",
    "\n",
    "    adjA = getMatrizAdjunta(At)\n",
    "\n",
    "    invDetA = 1/detA\n",
    "\n",
    "    C = createMatrix(m,n,0)\n",
    "\n",
    "    for i in range(m):\n",
    "\n",
    "        for j in range(n):\n",
    "\n",
    "            C[i][j] = invDetA * adjA[i][j]\n",
    "\n",
    "    return C\n",
    "\n",
    "\n",
    "\n",
    "def evalPolinomio(coef,x):\n",
    "\n",
    "    y = []\n",
    "\n",
    "    coef = np.asarray(coef)\n",
    "\n",
    "    for i in range(len(x)):\n",
    "\n",
    "        y.append(0)\n",
    "\n",
    "        for c in range(len(coef)):\n",
    "\n",
    "            y[i] += (x[i]**c) * coef[c]\n",
    "\n",
    "    return y\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "x = [10,20,30]\n",
    "\n",
    "y = createMatrix(3,1,0)\n",
    "\n",
    "y[0] = [0.1763]\n",
    "\n",
    "y[1] = [0.3640]\n",
    "\n",
    "y[2] = [0.5774]\n",
    "\n",
    "n = 3\n",
    "\n",
    "A = createMatrix(n,n,0)\n",
    "\n",
    "for i in range(n):\n",
    "\n",
    "    for j in range(n):\n",
    "\n",
    "        A[i][j] = x[i]**j\n",
    "\n",
    "print(A)\n",
    "\n",
    "\n",
    "\n",
    "invA = getMatrizInversa(A)\n",
    "\n",
    "B = multMatrix(invA,y)\n",
    "\n",
    "\n",
    "\n",
    "print(B)\n",
    "\n",
    "plt.plot(x,y,'ro')\n",
    "\n",
    "x2 = np.linspace(10, 30, 100)\n",
    "\n",
    "y2 = evalPolinomio(B, x2)\n",
    "\n",
    "plt.plot(x2,y2)\n",
    "\n",
    "plt.show()"
